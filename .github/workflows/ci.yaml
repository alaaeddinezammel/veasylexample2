name: Deploy Apigee Proxy

on:
  push:
    branches:
      - main
      - develop

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      api_name: ${{ steps.get_current_revision.outputs.api_name }}
      current_revision: ${{ steps.get_current_revision.outputs.current_revision }}
      new_revision: ${{ steps.import_proxy.outputs.revision }}
      environment: ${{ steps.set_env.outputs.environment }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Auth to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          token_format: 'access_token'
          workload_identity_provider: 'projects/508284363122/locations/global/workloadIdentityPools/github-pool/providers/github-provider-v2'
          service_account: 'sa-ci-cd-github@primal-gate-456620-t1.iam.gserviceaccount.com'

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v1

      - name: Set environment name based on branch
        id: set_env
        run: |
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            echo "environment=prd" >> $GITHUB_OUTPUT
          else
            echo "environment=eval" >> $GITHUB_OUTPUT
          fi

      - name: Get currently deployed revision
        id: get_current_revision
        run: |
          sudo apt-get update && sudo apt-get install -y libxml2-utils jq
          XML_FILE=$(find ./apiproxy -maxdepth 1 -name '*.xml' | head -n 1)
          API_NAME=$(xmllint --xpath 'string(//APIProxy/@name)' "$XML_FILE")
          echo "api_name=$API_NAME" >> $GITHUB_OUTPUT

          ORG="primal-gate-456620-t1"
          ENV="${{ steps.set_env.outputs.environment }}"
          TOKEN="${{ steps.auth.outputs.access_token }}"

          CURRENT=$(curl -s -H "Authorization: Bearer $TOKEN" \
            "https://apigee.googleapis.com/v1/organizations/$ORG/environments/$ENV/apis/$API_NAME/deployments" \
            | jq -r '.deployments[0].revision // empty')

          echo "current_revision=$CURRENT" >> $GITHUB_OUTPUT

      - name: Zip Apigee proxy bundle
        run: zip -r proxy.zip apiproxy

      - name: Import proxy to Apigee
        id: import_proxy
        run: |
          API_NAME="${{ steps.get_current_revision.outputs.api_name }}"
          ORG="primal-gate-456620-t1"
          TOKEN="${{ steps.auth.outputs.access_token }}"

          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: multipart/form-data" \
            -F "file=@proxy.zip" \
            "https://apigee.googleapis.com/v1/organizations/$ORG/apis?action=import&name=$API_NAME")

          echo "$RESPONSE" | grep -q '"error"' && exit 1
          REVISION=$(echo "$RESPONSE" | grep -oP '"revision"\s*:\s*"\K[0-9]+')
          echo "revision=$REVISION" >> $GITHUB_OUTPUT

      - name: Deploy to environment
        run: |
          API_NAME="${{ steps.get_current_revision.outputs.api_name }}"
          REVISION="${{ steps.import_proxy.outputs.revision }}"
          ENV="${{ steps.set_env.outputs.environment }}"
          ORG="primal-gate-456620-t1"
          TOKEN="${{ steps.auth.outputs.access_token }}"

          curl -s -X POST \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"serviceAccount\": \"sa-ci-cd-github@primal-gate-456620-t1.iam.gserviceaccount.com\"}" \
            "https://apigee.googleapis.com/v1/organizations/$ORG/environments/$ENV/apis/$API_NAME/revisions/$REVISION/deployments?override=true"

  test:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Newman
        run: npm install -g newman

      - name: Run Postman E2E Tests
        run: |
          API_NAME="${{ needs.deploy.outputs.api_name }}"
          COLLECTION_PATH=$(find testE2E -type f -name "${API_NAME}*.postman_collection.json" | head -n 1)

          if [[ -z "$COLLECTION_PATH" ]]; then
            echo "‚ùå No Postman collection found for API: $API_NAME"
            exit 1
          fi

          echo "‚ñ∂Ô∏è Running tests using local collection: $COLLECTION_PATH"
          newman run "$COLLECTION_PATH" --reporters cli

  rollback:
    needs: [ deploy, test ]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Auth to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          token_format: 'access_token'
          workload_identity_provider: 'projects/508284363122/locations/global/workloadIdentityPools/github-pool/providers/github-provider-v2'
          service_account: 'sa-ci-cd-github@primal-gate-456620-t1.iam.gserviceaccount.com'

      - name: Rollback to previous revision and delete failed deployment
        run: |
          API_NAME="${{ needs.deploy.outputs.api_name }}"
          NEW_REVISION="${{ needs.deploy.outputs.new_revision }}"
          PREV_REVISION="${{ needs.deploy.outputs.current_revision }}"
          ENV="${{ needs.deploy.outputs.environment }}"
          ORG="primal-gate-456620-t1"
          TOKEN="$(gcloud auth print-access-token)"
          
          echo "‚ùå Tests failed ‚Äî rolling back..."
          echo "üßπ Undeploying failed revision: $NEW_REVISION"
          curl -s -X DELETE \
            -H "Authorization: Bearer $TOKEN" \
            "https://apigee.googleapis.com/v1/organizations/$ORG/environments/$ENV/apis/$API_NAME/revisions/$NEW_REVISION/deployments" || echo "‚ö†Ô∏è Undeploy failed or was already undeployed"
          
          if [[ -n "$PREV_REVISION" ]]; then
            echo "üîÅ Redeploying previous revision: $PREV_REVISION"
            curl -s -X POST \
              -H "Authorization: Bearer $TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"serviceAccount\": \"sa-ci-cd-github@primal-gate-456620-t1.iam.gserviceaccount.com\"}" \
              "https://apigee.googleapis.com/v1/organizations/$ORG/environments/$ENV/apis/$API_NAME/revisions/$PREV_REVISION/deployments?override=true"
            echo "‚úÖ Rollback to $PREV_REVISION complete"
          else
            echo "‚ö†Ô∏è No previous revision to rollback to."
          fi
          
          echo "üóëÔ∏è Deleting failed revision: $NEW_REVISION"
          curl -s -X DELETE \
            -H "Authorization: Bearer $TOKEN" \
            "https://apigee.googleapis.com/v1/organizations/$ORG/apis/$API_NAME/revisions/$NEW_REVISION" || echo "‚ö†Ô∏è Deletion failed or revision already removed"
